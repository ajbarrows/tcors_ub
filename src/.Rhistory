.groups = "keep")
df_strength_w12 <- df_strength %>% filter(week == "week12")
ancova_fm_strength <- experimental_cpd_mean ~ dose + baseline_cpd_mean + strength
ancova_strength <- lm(ancova_fm_strength, data = df_strength_w12)
car::Anova(adj_ancova, type = 3)
ancova_fm_strength <- experimental_cpd_mean ~ dose + baseline_cpd_mean + strength
ancova_strength <- lm(ancova_fm_strength, data = df_strength_w12)
# summary(ancova_strength)
car::Anova(ancova_strength, type = 3)
install.packages("car")
knitr::opts_chunk$set(echo = TRUE)
# setup
library(dplyr)
library(ggplot2)
theme_set(theme_classic())
# load data
load("../clean/s2_data.RData")
knitr::opts_chunk$set(echo = TRUE)
# setup
library(dplyr)
library(ggplot2)
theme_set(theme_classic())
# load data
load("../data/clean/s2_data.RData")
write.csv(df, "../clean/s2_data.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# setup
library(dplyr)
library(ggplot2)
theme_set(theme_classic())
# load data
load("../data/clean/s2_data.RData")
write.csv(df, "../data/clean/s2_data.csv", row.names = FALSE)
n_pts <- df %>% distinct(screen_id) %>% nrow()
n_wk12 <- df %>% filter(week == "week12") %>% nrow()
df %>% filter(week == "week12") %>%
group_by(dose) %>%
count() %>%
ungroup() %>%
mutate(`%` = round(n / sum(n) * 100, 2)) %>%
knitr::kable()
# average by treatment group by week
# df_sum <- df %>%
#   group_by(screen_id, dose, week, project, screen_sex, menthol_status) %>%
#   summarize(
#     across(
#       c(experimental_cpd, baseline_cpd, screen_age),
#       list(mean = mean),
#       na.rm = TRUE
#   ))
#
#
# # pull out primary outcome
# df_primary <- df_sum %>% filter(week == "week12")
#
# # ANCOVA for total CPD at week 12
#
# ancova_fm <- experimental_cpd_mean ~ dose + project + screen_sex + menthol_status + screen_age_mean + baseline_cpd_mean
# orig_ancova <- aov(ancova_fm, data = df_primary)
# car::Anova(orig_ancova, type = 3)
# remove non-significant predictors
df_sum_final <- df %>%
group_by(screen_id, dose, screen_age, week) %>%
summarize(
across(
c(experimental_cpd, baseline_cpd),
list(mean = mean),
na.rm = TRUE
),
.groups = "keep")
df_final <- df_sum_final %>% filter(week == "week12")
ancova_fm_red <- experimental_cpd_mean ~ dose + baseline_cpd_mean
adj_ancova <- lm(ancova_fm_red, data = df_final)
# summary(adj_ancova)
car::Anova(adj_ancova, type = 3)
# post-hoc comparison
pair_test <- pairwise.t.test(
df_final$experimental_cpd_mean,
df_final$dose,
p.adjust.method = "bonf"
)
pair_test$p.value
# summarize data without non-significant predictors
predict_summary_w12 <- function(model, df, title) {
pred <- as.data.frame(predict(model, df, interval = "confidence"))
df_predict <- cbind(
df,
"adj_mean_cpd" = pred$fit,
"adj_lwrCI" = pred$lwr,
"adj_uprCI" = pred$upr
)
summary_vals <- df_predict %>%
group_by(dose) %>%
summarize(
across(c(adj_mean_cpd, adj_lwrCI, adj_uprCI),
list(mean = mean))
)
p <- df_predict %>%
ggplot(aes(x = dose, y = adj_mean_cpd, color = dose, fill = dose)) +
geom_boxplot(show.legend = FALSE) +
annotate("text", x = 1, y = 70, label = "*", size = 5) +
annotate("text", x = 2, y = 70, label = "*", size = 5) +
labs(
y = "Adjusted Mean CPD at Week 12",
x = "Cigarette Nicotine Dose (mg/g)",
title = title
)
list(
"plot" = p,
"summary_vals" = summary_vals)
}
pred_out <- predict_summary_w12(adj_ancova, df_final, "Adjusted Week 12 Total CPD")
pred_out$p
pred_out$summary_vals
df %>%
distinct(screen_id, .keep_all = TRUE) %>%
group_by(strength) %>%
mutate(usual_brand = factor(usual_brand)) %>%
filter(!is.na(strength), !strength == "") %>%
count() %>%
ungroup() %>%
mutate(pct = n / sum(n) * 100 ) %>%
ggplot(aes(x = reorder(strength, -pct)  , y = pct, fill = strength)) +
geom_col() +
labs(
x = "Cigarette Strength",
y = "Percent of Sample",
title = "Distribution of Usual Brand Strength Preference"
)
# limit to "regular" strength
df_limited <- df %>%
filter(strength == "regular") %>%
group_by(screen_id, dose, screen_age, week) %>%
summarize(
across(
c(experimental_cpd, baseline_cpd),
list(mean = mean),
na.rm = TRUE
),
.groups = "keep")
df_lim_w12 <- df_limited %>% filter(week == "week12")
nrow(df_lim_w12)
ancova_limited <- lm(ancova_fm_red, data = df_limited)
summary(ancova_limited)
car::Anova(adj_ancova, type = 3)
# post-hoc
pair_test <- pairwise.t.test(
df_limited$experimental_cpd_mean,
df_limited$dose,
p.adjust.method = "bonf"
)
pair_test$p.value
car::Anova(adj_ancova, type = 3)
car::Anova(ancova_limited, type = 3)
pred_limited <- predict_summary_w12(
ancova_limited,
df_lim_w12,
"Adjusted Week 12 Total CPD - Regular Strength Smokers"
)
pred_limited$plot
pred_limited$summary_vals
df_strength <- df %>%
group_by(screen_id, dose, screen_age, week, strength) %>%
summarize(
across(
c(experimental_cpd, baseline_cpd),
list(mean = mean),
na.rm = TRUE
),
.groups = "keep")
df_strength_w12 <- df_strength %>% filter(week == "week12")
ancova_fm_strength <- experimental_cpd_mean ~ dose + baseline_cpd_mean + strength
ancova_strength <- lm(ancova_fm_strength, data = df_strength_w12)
# summary(ancova_strength)
car::Anova(ancova_strength, type = 3)
df
# setup
library(dplyr)
library(ggplot2)
theme_set(theme_classic())
# load data
load("../clean/s2_data.RData")
# setup
library(dplyr)
library(ggplot2)
theme_set(theme_classic())
# load data
load("../../data/clean/s2_data.RData")
# setup
library(dplyr)
library(ggplot2)
theme_set(theme_classic())
# load data
load("../data/clean/s2_data.RData")
setwd("~/Dropbox/phd/projects/tcors_ub/src")
df %>%
distinct(screen_id, .keep_all = TRUE) %>%
group_by(strength) %>%
mutate(usual_brand = factor(usual_brand)) %>%
filter(!is.na(strength), !strength == "") %>%
count() %>%
ungroup() %>%
mutate(pct = n / sum(n) * 100 ) %>%
ggplot(aes(x = reorder(strength, -pct)  , y = pct, fill = strength)) +
geom_col() +
labs(
x = "Cigarette Strength",
y = "Percent of Sample",
title = "Distribution of Usual Brand Strength Preference"
)
# limit to "regular" strength
df_limited <- df %>%
filter(strength == "regular") %>%
group_by(screen_id, dose, screen_age, week) %>%
summarize(
across(
c(experimental_cpd, baseline_cpd),
list(mean = mean),
na.rm = TRUE
),
.groups = "keep")
df_lim_w12 <- df_limited %>% filter(week == "week12")
nrow(df_lim_w12)
ancova_limited <- lm(ancova_fm_red, data = df_limited)
ancova_fm_red <- experimental_cpd_mean ~ dose + baseline_cpd_mean
ancova_limited <- lm(ancova_fm_red, data = df_limited)
summary(ancova_limited)
car::Anova(adj_ancova, type = 3)
ancova_fm_red <- experimental_cpd_mean ~ dose + baseline_cpd_mean
ancova_limited <- lm(ancova_fm_red, data = df_limited)
summary(ancova_limited)
adj_ancova <- lm(ancova_fm_red, data = df_limited)
car::Anova(adj_ancova, type = 3)
# post-hoc
pair_test <- pairwise.t.test(
df_limited$experimental_cpd_mean,
df_limited$dose,
p.adjust.method = "bonf"
)
pair_test$p.value
car::Anova(adj_ancova, type = 3)
car::Anova(ancova_limited, type = 3)
pred_limited <- predict_summary_w12(
ancova_limited,
df_lim_w12,
"Adjusted Week 12 Total CPD - Regular Strength Smokers"
)
predict_summary_w12 <- function(model, df, title) {
pred <- as.data.frame(predict(model, df, interval = "confidence"))
df_predict <- cbind(
df,
"adj_mean_cpd" = pred$fit,
"adj_lwrCI" = pred$lwr,
"adj_uprCI" = pred$upr
)
summary_vals <- df_predict %>%
group_by(dose) %>%
summarize(
across(c(adj_mean_cpd, adj_lwrCI, adj_uprCI),
list(mean = mean))
)
p <- df_predict %>%
ggplot(aes(x = dose, y = adj_mean_cpd, color = dose, fill = dose)) +
geom_boxplot(show.legend = FALSE) +
annotate("text", x = 1, y = 70, label = "*", size = 5) +
annotate("text", x = 2, y = 70, label = "*", size = 5) +
labs(
y = "Adjusted Mean CPD at Week 12",
x = "Cigarette Nicotine Dose (mg/g)",
title = title
)
list(
"plot" = p,
"summary_vals" = summary_vals)
}
pred_limited <- predict_summary_w12(
ancova_limited,
df_lim_w12,
"Adjusted Week 12 Total CPD - Regular Strength Smokers"
)
pred_limited$plot
pred_limited$summary_vals
df_strength <- df %>%
group_by(screen_id, dose, screen_age, week, strength) %>%
summarize(
across(
c(experimental_cpd, baseline_cpd),
list(mean = mean),
na.rm = TRUE
),
.groups = "keep")
df_strength_w12 <- df_strength %>% filter(week == "week12")
ancova_fm_strength <- experimental_cpd_mean ~ dose + baseline_cpd_mean + strength
ancova_strength <- lm(ancova_fm_strength, data = df_strength_w12)
# summary(ancova_strength)
car::Anova(ancova_strength, type = 3)
# Tony Barrows
read.csv("../data/clean/s2_data.RData")
# Tony Barrows
load("../data/clean/s2_data.RData")
# Tony Barrows
load("../data/clean/s2_data.RData")
View(df)
library(dplyr)
# Tony Barrows
library(dplyr)
load("../data/clean/s2_data.RData")
df %>%
distinct(screen_id) %>% nrow()
View(df)
df %>%
distinct(usual_brand, strength)
df %>%
distinct(usual_brand, strength) %>%
arrnage(usual_brand)
df %>%
distinct(usual_brand, strength) %>%
arrange(usual_brand)
df %>%
mutate(usual_brand = stringr::str_trim(usual_brand))
df %>%
mutate(usual_brand = stringr::str_trim(usual_brand)) %>%
distinct(usual_brand)
df %>%
mutate(usual_brand = stringr::str_trim(usual_brand)) %>%
distinct(usual_brand) %>%
arrnage(usual_brand)
df %>%
mutate(usual_brand = stringr::str_trim(usual_brand)) %>%
distinct(usual_brand) %>%
arrange(usual_brand)
nic_table <- read.csv("../data/raw/carmine_table.csv")
process_strings <- function(df) {
df %>%
mutate(usual_brand = stringr::str_trim(usual_brand)) %>%
distinct(usual_brand) %>%
arrange(usual_brand)
}
process_strings <- function(df) {
df %>%
mutate(usual_brand = stringr::str_trim(usual_brand))
}
process_strings(df) %>%
distinct(usual_brand) %>%
arrange(usual_brand) %>%
left_join(nic_table, by = c("usual_brand" = "Product"))
# McNeil Data Elastic Net
# Tony Barrows
# 2022-09-15
library(glmnet)
library(caret)
# library(nestedcv)
library(dplyr)
library(ggplot2)
# load("../data/latent_df_4.RData")
# load("../data/df_clean.RData")
# load("../data/baseline_subset.RData")
#
# set.seed(42)
# functions -------
create_train_test <- function(df, split = 0.8) {
tr_index <- createDataPartition(
df$latent_class,
p = split,
list = FALSE
)
list(
"X_train" = subset(df, select = -latent_class)[tr_index,],
"X_test" = subset(df, select = -latent_class)[-tr_index,],
"y_train" = df$latent_class[tr_index],
"y_test"= df$latent_class[-tr_index]
)
}
split_multiclass <- function(multi_vector) {
df <- model.matrix(~0+multi_vector)
out_list <- list()
for (i in 1:ncol(df)) {
out_list[[i]] <- df[, i]
}
out_list
}
prediction_accuracy <- function(X_test_mat, y_test, model) {
# mm_test <- model.frame(ff, X_test, na.action = "na.pass")
# mat_test <- model.matrix(ff, mm_test)
pred <- data.frame(predict(model, s = "lambda.min", newx = X_test_mat))
names(pred) <- c(1:4)
pred <- factor(max.col(pred), levels = c(1:4))
metrics <-  assess.glmnet(
model,
newx = as.matrix(X_test_mat),
newy = y_test,
s = "lambda.min",
family = "multinomial"
)
confusion <- caret::confusionMatrix(
data = pred,
reference = y_test
)
accuracy <- 1 - metrics$class[1]
list(
"accuracy" = accuracy,
"confusion_matrix" = confusion
)
}
create_model_matrix <- function(df) {
ff <- ~.
mm <- model.frame(ff, df, na.action = "na.pass")
model.matrix(ff, mm)
}
plot_accuracy <- function(model_frame) {
ggplot(model_frame, aes(x = alpha, y = accuracy, fill = lambda)) +
geom_point() +
ylim(0,1) +
labs(
x = "Alpha",
y = "Classification Accuracy",
color = "Lambda",
title = "Results of Cross-Validated Elastic Net Regularization"
)
}
# main -------
# load data
# train_test <- create_train_test(
#   df_sub %>%
#     distinct(subject_id, .keep_all = TRUE) %>%
#     select(-c(subject_id, visit)) %>%
#     # select(latent_class, AGE, FTNSCORE) %>%
#     mutate(latent_class = factor(latent_class))
#   )
# X_train <- train_test$X_train
# X_test <- train_test$X_test
#
# y_train <- train_test$y_train
# y_test <- train_test$y_test
#
# train_ElasticNet <- function(X_train, X_test, y_train, y_test) {
#
#   X_train_mat <- create_model_matrix(X_train)
#
#   model_frame <- data.frame()
#   alpha_sequence <- seq(0, 1, 0.01)
#   models <- list()
#   for (a in 1:length(alpha_sequence)) {
#
#     cv_fit <- cv.glmnet(
#       X_train_mat,
#       y_train,
#       family = "multinomial",
#       alpha = alpha_sequence[a],
#       nfolds = 10
#     )
#     accuracy <- prediction_accuracy(X_test, y_test, cv_fit)$accuracy
#     # pred <- predict(cv_fit, s = "lambda.min", newx = (as.matrix())
#     # alpha_mod <- list(cv_fit)
#     # names(alpha_mod) <- a
#     # model_list <- append(model_list, alpha_mod)
#     tmp <- data.frame(
#       alpha = a,
#       lambda = cv_fit$lambda.min,
#       accuracy = accuracy
#       # model = alpha_mod
#     )
#     models[[a]] <- cv_fit
#     model_frame <- rbind(model_frame, tmp)
#   }
# }
# sequence along alpha from 0 to 1, cross-validating at each step. lambda sequence
# is package default
# assemble list of minimum lambdas from each alpha value
# model_values <- data.frame()
# for (i in 1:length(model_list)) {
#   tmp <- data.frame(
#    "alpha" = names(model_list)[i],
#    "min_lambda" = model_list[[i]]$lambda.min
#   )
#   model_values <- rbind(model_values, tmp)
# }
# pull out the coefficients of the model with the overall lowest lambda
# min_lambda_overall <- min(model_values$min_lambda)
# best_alpha <- model_values$alpha[model_values$min_lambda == min_lambda_overall]
#
# final_model <- model_list[best_alpha][[1]]
# coef(final_model, s = "lambda.min")
# plot parameter relationships
#
# max_accuracy <- max(model_frame$accuracy)
# best_lambda <- model_frame$lambda[model_frame$accuracy == max_accuracy]
# best_alpha <- model_frame$alpha[model_frame$accuracy == max_accuracy]
#
#
# plot_accuracy(model_frame)
# max_accuracy
# best_lambda
# best_alpha
# best_mod <- models[which(model_frame$accuracy == max_accuracy)[1]]
#
# model <- best_mod
#
# mm_test <- model.frame(ff, X_test, na.action = "na.pass")
# mat_test <- model.matrix(ff, mm_test)
# pred <- data.frame(predict(model, s = "lambda.min", newx = as.matrix(mat_test)))
# names(pred) <- c(1:4)
# pred <- factor(max.col(pred), levels = c(1:4))
#
# caret::confusionMatrix(
#   data = pred,
#   reference = y_test
# )
#
#
# coef(best_mod[[1]], s = "lambda.min")
# prediction_accuracy(X_test, y_test, best_mod)
